import timework 
import textwork
from loader import dp, db, FSMContext
from aiogram import types
from aiogram.dispatcher.filters import Text
from states import *
from keyboards import *


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if db.user_exists(message.from_id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                             reply_markup=menu_keyboard)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å —Ä–∞–ø–∏—Å–∞–Ω–∏–µ–º!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å")
        await ChooseClass.user_class.set()
        

@dp.message_handler(state=ChooseClass.user_class)
async def choose_class(message: types.Message, state: FSMContext):
    user_class = message.text.strip()
    
    if db.class_exists(user_class):
        db.update_class(message.from_id, user_class)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                             reply_markup=menu_keyboard)
        await state.finish()
    else:
        await message.answer("–í—ã –æ—à–∏–±–ª–∏—Å—å, —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n" +
                              "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ: –ö–ª–∞—Å—Å–ë—É–∫–≤–∞ (–∫ –ø—Ä–∏–º–µ—Ä—É, 7–ê")


@dp.message_handler(Text(equals="–ü–æ–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—ÅüîÑ"))
async def change_class(message: types.Message):
    await ChooseClass.user_class.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –≤–∏–¥–µ—Ç—å",
                         reply_markup=remove_keyboard)


@dp.message_handler(Text(equals="–°–µ–≥–æ–¥–Ω—è‚§µÔ∏è"))
async def today(message: types.Message):
    schedule = db.get_schedule(message.from_id, timework.get_weekday())
    if schedule:
        textwork.format_schedule(schedule)
    else:
        await message.answer("–í—ã—Ö–æ–¥–Ω–æ–πüò¥")
        

@dp.message_handler(Text(equals="–ó–∞–≤—Ç—Ä–∞‚û°Ô∏è"))
async def tomorrow(message: types.Message):
    schedule = db.get_schedule(message.from_id, timework.get_weekday(tomorrow=True))
    if schedule:
        await message.answer(textwork.format_schedule(schedule))
    else:
        await message.answer("–í—ã—Ö–æ–¥–Ω–æ–πüò¥")

        
    
    